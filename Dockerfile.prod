###########
# BUILDER #
###########

# Use a lightweight base image
FROM python:3.10-slim as builder

# Set the working directory in the container
WORKDIR /usr/src/app

# Set environment variables for Python
# For not writting bytecode files (.pyc files) in the container
ENV PYTHONDONTWRITEBYTECODE 1
# For not buffering Python output but rather write it directly to the console
ENV PYTHONUNBUFFERED 1

# Install system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends gcc

# Install staging dependencies
RUN mkdir requirements
COPY requirements/base.txt requirements
COPY requirements/prod.txt requirements
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /usr/src/app/wheels -r requirements/prod.txt

#########
# FINAL #
#########

# Use a lightweight base image
FROM python:3.10-slim

# Create directory for the app user
RUN mkdir -p /home/app

# Create the app user
RUN addgroup --system app && adduser --system --group app

# Create the appropriate directories
ENV HOME=/home/app
ENV APP_HOME=/home/app/web
RUN mkdir $APP_HOME
WORKDIR $APP_HOME

# Install dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends netcat-traditional && \
    apt-get clean
COPY --from=builder /usr/src/app/wheels /wheels
COPY --from=builder /usr/src/app/requirements/base.txt .
COPY --from=builder /usr/src/app/requirements/prod.txt .
RUN pip install --upgrade pip
RUN pip install --no-cache /wheels/*

# Copy entrypoint.prod.sh
COPY ./entrypoint.prod.sh $APP_HOME/entrypoint.prod.sh
RUN sed -i 's/\r$//g' $APP_HOME/entrypoint.prod.sh
RUN chmod +x $APP_HOME/entrypoint.prod.sh

# Copy the Django project files into the container
COPY . $APP_HOME

# Chown all the files to the app user
RUN chown -R app:app $APP_HOME

# change to the app user
USER app

# Run entrypoint.prod.sh
ENTRYPOINT ["/home/app/web/entrypoint.prod.sh"]
